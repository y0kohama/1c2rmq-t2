/////// ОПИСАНИЕ
// МОДУЛЬ ПОДРАЗДЕЛЕНИЙ

//  ПРИ КОПИРОВАНИИ МОДУЛЯ 
//	1. Изменения параматров точки обмена ПолучитьТочкуОбмена(), 	Проверка Имени, Корректировака Наименования
// 	2. Изменения параматров очереди ИнициализироватьОчереди(),  	Корректировка Ключа, формирующего имя очереди
//	3. Изменить ключевой элемент в ОбработатьJSON()
//	4. Добавить окончание модуля в ИнтеграцияRMQ.ПоддерживаемыеДанные()
//	5. Заменить Менеджера объекта в функции Менеджер()
//	6. Проверить использование необходимых зависимостей Зависимости()
//	7. Скорректировать описания в комментариях начала модуля
//  8. Отменить экспорт процедуры ПолучитьДанные()

//  ПРИ ВНЕДРЕНИИ
//	1. Проверка функции ЗаполнитьОбъект 
//	2. Возможно переопределение функции ПолучитьОбъект
//	3. Отладка формата сообщений использованием обработки ИнтеграцияRMQОтладка e1cib/app/Обработка.ИнтеграцияRMQОтладка
//	4. Публикация процедуры ПолучитьДанные (указываем конструкцию ЭКСПОРТ) 


//#Область Переопределяемыефункции

Функция ПолучитьТочкуОбмена(ОкончаниеМодуля) 
	
	Параметры = Новый Структура;
	Параметры.Вставить("Тип", Перечисления.ИнтеграцияRMQТипТочкиОбмена.topic);
	Параметры.Вставить("Durable", Истина);
	Параметры.Вставить("Имя", "adm."+ОкончаниеМодуля);  			//Проверить при копировании
	Параметры.Вставить("Наименование", "Подразделение линейное");   //Заменить при копировании при необходимости
	
	Результат = ИнтеграцияRMQТ2.ТочкаОбмена(Параметры);
	Возврат Результат;
	
КонецФункции

//Процедура ИнициализироватьОчереди(ОкончаниеМодуля) Экспорт
//	Ключ 		= "changeElements.Linear";	        //Заменить при копировании
//	
//	Параметры = Новый Структура;
//	Параметры.Вставить("Владелец", 				ПолучитьТочкуОбмена(ОкончаниеМодуля));
//	Параметры.Вставить("Таймаут", 				5);
//	Параметры.Вставить("Durable", 				Истина);
//	Параметры.Вставить("Наименование", 			"Получение линейного подразделения"); //Заменить при копировании при необходимости
//	Параметры.Вставить("ИмяОчереди", 			ИнтеграцияRMQТ2.ПолучитьИмяОчереди(Ключ,Параметры.Владелец));
//	Параметры.Вставить("ПроцедураОбработчик",	"ИнтеграцияRMQТ2_"+ОкончаниеМодуля+".ПолучитьДанные");
//	Очередь1 = ИнтеграцияRMQТ2.Очередь(Параметры);
//КонецПроцедуры

//Функция Менеджер()
//	Возврат Справочники.СтруктураПредприятия;	//Заменить при копировании
//КонецФункции

//Функция Зависимости()
//	Результат = Новый Структура;
//	МодульФизЛиц = ИнтеграцияRMQТ2.МодулиТиповДанных().Получить("individuals");  //Проверить использование при копировании
//	Если МодульФизЛиц = Неопределено Тогда
//		МодульФизЛиц = ИнтеграцияRMQТ2;
//	КонецЕсли;
//	Результат.Вставить("ФизЛица",МодульФизЛиц); 
//	Возврат Результат;	
//КонецФункции

//#КонецОбласти


#Область ПрограммныйИнтерфейс

Функция ПолучитьДанные1(Сообщение, ПараметрыСообщения, Результат) Экспорт  //публикацию включаем после того как выполнена отладка с помошью обработки ИнтеграцияRMQОтладка
	
	//ПотокВПамяти	= Новый ПотокВПамяти(Буфер);
	//ЧтениеJSON		= Новый ЧтениеJSON;
	//ЧтениеJSON.ОткрытьПоток(ПотокВПамяти);
	//ОбработатьJSON(ЧтениеJSON);
	
	МенеджерЗаписи = РегистрыСведений.удалитьЛогПринятых.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МенеджерЗаписи.ДатаПолучения = ТекущаяДатаСеанса();
	МенеджерЗаписи.ДанныеСообщения = Сообщение;
	МенеджерЗаписи.Записать();
	
КонецФункции

Функция ПолучитьДанные2(Сообщение, ПараметрыСообщения, Результат)   //публикацию включаем после того как выполнена отладка с помошью обработки ИнтеграцияRMQОтладка
	
	//ПотокВПамяти	= Новый ПотокВПамяти(Буфер);
	//ЧтениеJSON		= Новый ЧтениеJSON;
	//ЧтениеJSON.ОткрытьПоток(ПотокВПамяти);
	//ОбработатьJSON(ЧтениеJSON);	
	
КонецФункции


//Функция ОбработатьJSON(ЧтениеJSON) Экспорт
//	ПолученныеДанные = ПрочитатьJSON(ЧтениеJSON);
//	ЧтениеJSON.Закрыть();
//	
//	Если ПолученныеДанные.Свойство("departmentsLinear") Тогда       //Заменить при копировании
//		ПолученныеДанные = ПолученныеДанные.departmentsLinear;
//	КонецЕсли;
//	НачатьТранзакцию();
//	Ссылка = СоздатьИЗаполнитьОбъект(ПолученныеДанные);
//	ЗафиксироватьТранзакцию();	
//	
//	Возврат Ссылка;
//КонецФункции

//Функция ПолучитьСсылку(КлючевыеСвойства,СоздаватьЕслиНеНайдена = Ложь) Экспорт 
//	Ссылка = ИнтеграцияRMQТ2.ПолучитьСсылкуСправочника(Менеджер(),КлючевыеСвойства);
//	Если СоздаватьЕслиНеНайдена И Ссылка.Пустая() Тогда
//		Ссылка = СоздатьИЗаполнитьОбъект(Новый Структура("КлючевыеСвойства",КлючевыеСвойства));		
//	КонецЕсли;	
//	Возврат Ссылка;
//Конецфункции

//Функция СоздатьИЗаполнитьОбъект(ПолученныеДанные)
//	Перем Событие;
//	Объект = ПолучитьОбъект(ПолученныеДанные.КлючевыеСвойства);
//	Если Объект =  Неопределено Тогда
//		Возврат Неопределено
//	КонецЕсли;	
//	Если ПолученныеДанные.Свойство("Событие",Событие) И Событие =  "Удален" И  Объект.ЭтоНовый() Тогда
//		Возврат Неопределено; //объекта и не было, а мы получили по нему событие удлания, ничего не делаем
//	КонецЕсли;
//	ЗаполнитьОбъект(Объект,ПолученныеДанные);
//	Объект.Записать();
//	Возврат Объект.Ссылка
//КонецФункции	

#КонецОбласти


//#Область ВспомогательныеПроцедурыФункции

//Функция ПолучитьОбъект(КлючевыеСвойства) 
//	Возврат ИнтеграцияRMQТ2.ПолучитьОбъектСправочника(Менеджер(),КлючевыеСвойства);
//Конецфункции

//Процедура ЗаполнитьОбъект(Объект,ПолученныеДанные)
//	Перем КлючСвойства, РодительКлючСвойства, РуководительКлючСвойства;
//	Перем Событие;
//	Если ПолученныеДанные.Свойство("Событие",Событие) И Событие =  "Удален" Тогда
//		Объект.ПометкаУдаления = Истина;
//	Иначе	
//		//Не рекомендуется исползовать ЗаполнитьЗначенияСвойств из-за затруднения поиска использования того или иного свойства
//		Если ПолученныеДанные.Свойство("КлючевыеСвойства", КлючСвойства) Тогда				
//			КлючСвойства.Свойство("Код", Объект.Код);
//		КонецЕсли;	
//		ПолученныеДанные.Свойство("Наименование", 		Объект.Наименование);
//		ПолученныеДанные.Свойство("ВидПодразделения", 	Объект.ВидПодразделения);
//		ПолученныеДанные.Свойство("Расформировано", 	Объект.Расформировано);
//		ПолученныеДанные.Свойство("Порядок", 			Объект.Порядок);
//		ПолученныеДанные.Свойство("ДатаОткрытия", 		Объект.ДатаОткрытия);
//		ПолученныеДанные.Свойство("ДатаЗакрытия", 		Объект.ДатаЗакрытия);
//		ПолученныеДанные.Свойство("Город", 				Объект.Город);
//		Если ПолученныеДанные.Свойство("Родитель", РодительКлючСвойства) Тогда
//			Объект.Родитель 	= ПолучитьСсылку(РодительКлючСвойства,Истина);
//		КонецЕсли;
//		Если ПолученныеДанные.Свойство("РуководительПодразделения", РуководительКлючСвойства) Тогда
//			Объект.РуководительПодразделения = Зависимости().ФизЛица.ПолучитьСсылку(РуководительКлючСвойства,Истина);
//		КонецЕсли;
//	КонецЕсли;	
//КонецПроцедуры

//#КонецОбласти




